module Settings exposing (..)

import Element as El exposing (..)
import Element.Background as Background
import Element.Font as Font
import Element.Input as Input
import Element.Border as Border
import Element.Events as Events
import Browser.Events

type alias Settings =
    --These are the user input for generating a custom size table, thus they can be different from the actual size of the current table.
    { setWidth : Int
    , setHeight : Int
    , seed : Int
    , seedInput : String
    , isOpen : Bool
    }

type SettingsChanges =
      IncrementWidth
    | DecrementWidth
    | IncrementHeight
    | DecrementHeight
    | UpdateSeed String
    | OpenSettings
    | CloseSettings

--color palett
black = El.rgb255 0 0 0
white = El.rgb255 255 255 255
orange = El.rgb255 255 128 0
grey = El.rgb255 92 99 118

viewSettings : Settings -> Element Msg
viewSettings settings =
    let menuWidth = El.px 200
        menu =
            El.column
                [ El.width fill
                
                ]
                [ viewWidthCounter settings.setWidth
                , viewHeightCounter settings.setHeight
                , viewGenerateTableFromSeedButton
                , viewSeedInputField settings
                ]
    in case settings.isOpen of
           False -> 
               El.el
                   [ Events.onMouseEnter (UpdateSettings OpenSettings)
                   , El.height fill
                   , El.width menuWidth
                   ]
                   (El.el [El.centerY, El.centerX] (El.text "Settings"))
           True ->
               El.el
                   [ Events.onMouseLeave (UpdateSettings CloseSettings)
                   , El.height fill
                   , El.width menuWidth
                   , El.below menu
                   
                   ]
                   (El.el [El.centerY, El.centerX] (El.text "Settings"))

viewGenerateTableFromSeedButton : El.Element Msg
viewGenerateTableFromSeedButton =
    El.column
        [ --El.height (El.px 35)
         El.width fill
        , Background.color grey
        , spacing 5
        ] <|
        [ El.el
              [ Font.center
              , centerX
              ]
              ( El.text "Generate puzzle\nfrom seed")
        , Input.button
              [ Background.color orange
              , centerX
              , centerY
              , El.height (El.px 25)
              , El.width (El.px 120)
              , Font.color black
              , Font.center
              , Border.rounded 10
              , noFocusShadow
              ]
              { onPress = Just GenerateTableFromSeed
              , label = El.text "Generate"
              }
        ]

viewSeedInputField : Settings -> El.Element Msg
viewSeedInputField settings =
    El.el
        [ El.height (El.px 35)
        , El.width fill
        , Background.color grey
        , Border.roundEach
                      { topLeft = 0
                      , topRight = 0
                      , bottomLeft = 30
                      , bottomRight = 30
                      }
        ] <|
        Input.text
            [ El.height (El.px 30)
            , El.width (El.px 120)
            , El.padding 5
            , centerX
            , centerY
            , Font.color black
            , noFocusShadow
            
            ]
            { onChange = (UpdateSettings << UpdateSeed)
            , text = settings.seedInput
            , placeholder = Nothing
            , label = Input.labelHidden ""
            }


counterButton : String -> Msg -> El.Element Msg
counterButton buttonText msg =
    Input.button
        [ El.height (El.px 25)
        , El.width (El.px 25)
        , Background.color orange
        , Border.rounded 10
        , Font.center
        , Font.color black
        , noFocusShadow
        ]
        { onPress = Just  (msg)
        , label = El.text buttonText
        }
        
viewWidthCounter : Int -> El.Element Msg
viewWidthCounter val = 
    El.el
        [ El.height (El.px 35)
        , El.width fill
        , Background.color grey
        ]
        ( El.row [El.centerX]
              [ El.text "Width: "
              , counterButton "-" (UpdateSettings DecrementWidth)
              , El.text (String.fromInt val)
              , counterButton "+" (UpdateSettings IncrementWidth)
              ]
        )

viewHeightCounter : Int -> El.Element Msg
viewHeightCounter val =
    El.el
        [ El.centerX
        , El.height (El.px 35)
        , El.width fill
        , Background.color grey
        ]
        ( El.row [El.centerX]
              [ El.text "Height: "
              , counterButton "-" (UpdateSettings DecrementHeight)
              , El.text (String.fromInt val)
              , counterButton "+" (UpdateSettings IncrementHeight)
              ]
        )
